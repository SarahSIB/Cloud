I. Un p'tit nom DNS¶
Mini-partie pour définir un nom DNS à votre machine.

➜ Définissez un nom de domaine pour joindre notre azure1.tp2

WebUI ou CLI donc
le nom de domaine est associé à l'IP publique portée par l'interface de azure1.tp2 (genre il est pas associé à la VM directement)
le nom que vous choisissez doit contenir meow

Chemin sur UI : tp1.rg(resource groupe) --> azure1.tp1(VM1) --> Paramètre reseau --> azure1.tp1PUBLICIP
Nom de domaine facultatif : meowmeow
Enregistrer

🌞 Prouvez que c'est effectif

une ou plusieurs commande(s) az qui retourne(nt) :

la VM (genre au moins son nom)
l'IP publique
le nom DNS associé

PS C:\Users\sarah> az network public-ip show -g tp1-rg -n azure1.tp1PublicIP --query "{ip:ipAddress, dnsName:dnsSettings.fqdn}" -o table
Ip            DnsName
------------  -----------------------------------------
20.19.170.10  meowmeow.francecentral.cloudapp.azure.com

🌞Un curl fonctionnel vers le nom de domaine
sarah@azure1:~$ sudo apt install -y apache2
sarah@azure1:~$ sudo systemctl start apache2
sarah@azure1:~$ sudo systemctl enable apache2

PS C:\Users\sarah> curl http://meowmeow.francecentral.cloudapp.azure.com

StatusCode        : 200
StatusDescription : OK
Content           : <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
                    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
                    <html xmlns="http://www.w3.org/1999/xhtml">
                      <!--
                        Modified from the Debia...
RawContent        : HTTP/1.1 200 OK


2. Gooooo¶
➜ Sur votre PC, créez un fichier cloud-init.txt avec le contenu suivant :
PS C:\Users\sarah> notepad cloud-init.txt

#cloud-config
disable_root: false
system_info:
  default_user:
    name: sarah

users:
  - name: sarah
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: sudo
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIONekzDM3+gZNAJKTl9Ojf7CoVK7N07j8FEVmktxUc4L sarah@LAPTOP-NQC7EJ07

  - name: chanel
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: sudo
    shell: /bin/bash
    ssh_authorized_keys:
     - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIONekzDM3+gZNAJKTl9Ojf7CoVK7N07j8FEVmktxUc4L sarah@LAPTOP-NQC7EJ07

🌞 Tester cloud-init

PS C:\Users\sarah> az vm create --resource-group tp1-rg --name azure3.tp1 --image ubuntu2204 --custom-data C:\Users\sarah\cloud-init.txt --admin-username sarah --size Standard_B1s --public-ip-address '""'

🌞 connectez-vous en SSH à la VM nouvellement créée, directement sur le nouvel utilisateur créé par cloud-init
ssh sarah@20.19.170.10 chanel@10.0.0.7
The authenticity of host '10.0.0.7 (<no hostip for proxy command>)' can't be established.
ED25519 key fingerprint is SHA256:xmNBgz2tXmckMTpl8vY2fTOiUpuaX6QpRGXqKjP1q8s.

chanel@azure3:~$ sudo systemctl status cloud-init
● cloud-init.service - Cloud-init: Network Stage
     Loaded: loaded (/lib/systemd/system/cloud-init.service; enabled; vendor preset: enabled)
     Active: active (exited)

chanel@azure3:~$ cloud-init status
# Etat de cloud-init actuel, quand il s'est bien déroulé c'est "done"

status: done



chanel@azure3:~$ ls -al /var/log/cloud-init*
-rw-r----- 1 root   adm   4402 Oct 30 12:12 /var/log/cloud-init-output.log
-rw-r----- 1 syslog adm 138022 Oct 30 12:12 /var/log/cloud-init.log


🌞 Utilisez cloud-init pour préconfigurer une VM comme azure2.tp2 :

🌞ajoutez un user qui porte votre pseudo époser un fichier init.sql qui contient les commandes SQL du TP1
 lance une commande mysql pour exécuter le contenu du script init.sql

#cloud-config
disable_root: false

system_info:
  default_user:
    name: sarah

users:
  - name: sarah
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: false
    groups: [sudo]
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIONekzDM3+gZNAJKTl9Ojf7CoVK7N07j8FEVmktxUc4L sarah@LAPTOP-NQC7EJ07

packages:
  - mariadb-server

write_files:
  - path: /home/sarah/init.sql
    owner: sarah:sarah
    permissions: '0644'
    content: |
      CREATE DATABASE IF NOT EXISTS meow_database;
      CREATE USER IF NOT EXISTS 'meow'@'%' IDENTIFIED BY 'meow';
      GRANT ALL PRIVILEGES ON meow_database.* TO 'meow'@'%';
      FLUSH PRIVILEGES;

runcmd:
  - systemctl enable mariadb
  - systemctl start mariadb
  - sudo mariadb < /home/sarah/init.sql



🌞 Testez que ça fonctionne

🌞un déploiement avec un az vm create en passant votre fichier cloud-init.txt
connectez-vous en SSH, vérifiez que vous pouvez vous connecter au serveur de db (commande mysql) et que la base est créée

PS C:\Users\sarah> az vm create --resource-group tp1-rg --name azure3-tp2 --image Ubuntu2204 --size Standard_B1s --custom-data "C:\Users\sarah\cloud-init.txt" --public-ip-address '""' --authentication-type ssh --ssh-key-values "C:\Users\sarah\.ssh\cloud_tp.pub"
Je change le fichier de config en mettant ma nvl adresse ip ici : 10.0.0.10

PS C:\Users\sarah> ssh az3
The authenticity of host '10.0.0.10 (<no hostip for proxy command>)' can't be established.
ED25519 key fingerprint is SHA256:X8DWD5uxD9cAmDAkeRO1JchB/m/T4w8Y1/EYGdBo/lw.
This key is not known by any other names.


sarah@azure3-tp2:~$ sudo systemctl status mariadb
● mariadb.service - MariaDB 10.6.22 database server
     Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)
     Active: active (running)


sarah@azure3-tp2:~$ mysql -u meow -pmeow
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 38
Server version: 10.6.22-MariaDB-0ubuntu0.22.04.1 Ubuntu 22.04

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| meow_database      |
+--------------------+
2 rows in set (0.000 sec)


III - 
1. Un premier secret¶
Info
Là je donne juste les étapes pour avoir ce qu'on veut.
Documentez-vous pour les clics ou commandes az exacts.
Je précise qu'il sera nécessaire de refaire ça après, alors avec az, ça sera facilement répétable encore une fois, par rapport à la WebUI... wink wink

🌞 ➜ Créer un Key Vault

 PS C:\Users\sarah> az provider register --namespace Microsoft.KeyVault
Registering is still on-going. You can monitor using 'az provider show -n Microsoft.KeyVault'

az keyvault create --name kv-tp1-sarah --resource-group tp1-rg --location francecentral --enable-rbac-authorization false


🌞 ➜ Créer un secret

on s'en fout pour le moment, phase de tests, met ce que tu veux
➜ Activer la "Managed Identity" pour votre VM azure1.tp2

PS C:\Users\sarah> az vm identity assign --name azure1.tp1 --resource-group tp1-rg
{
  "systemAssignedIdentity": "b94edb23-f38a-4d5c-8b2f-86e68a2a09b7",
  "userAssignedIdentities": {}
}


c'est pour que ta VM ait une identité, genre qu'elle existe, dans le système d'authentification global d'Azure
ta VM aura alors un "Principal ID" : son identifiant unique pour les authentifications Azure

🌞 ➜ Configurer une Access policy

c'genre les droits associés au Key Vault
il faut donner à la VM les droits sur le Key Vault, pour qu'elle puisse récupérer des secrets
ELLE A JUSTE BESOIN DE LES CONSULTER

PS C:\Users\sarah> az keyvault set-policy --name kv-tp1-sarah --object-id b94edb23-f38a-4d5c-8b2f-86e68a2a09b7 --secret-permissions get list


🌞 ➜ Créer un secret

on s'en fout pour le moment, phase de tests, met ce que tu veux
PS C:\Users\sarah> az keyvault secret set --vault-name kv-tp1-sarah --name test --value "cest_un_test"

PS C:\Users\sarah> ssh az1
sarah@azure1:~$ curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

sarah@azure1:~$ az keyvault secret show --vault-name kv-tp1-sarah --name test --query value -o tsv
cest_un_test

2. Gérer les secrets de l'application¶
A. Script pour récupérer les secrets¶
🌞 ➜ Créer un nouveau secret dans votre Key Vault

 PS C:\Users\sarah> az keyvault secret set --vault-name kv-tp1-sarah --name DBPASSWORD --value "meow"



🌞 Environnement du script get_secrets.sh, il doit :

🌞 être stocké dans /usr/local/bin sur azure1.tp2 (commande mv)
sarah@azure1:~$ sudo mv ./get_secrets.sh /usr/local/bin/get_secrets.sh

🌞appartenir à l'utilisateur webapp (commande chown)
sarah@azure1:~$ sudo chown webapp:webapp /usr/local/bin/get_secrets.sh
sarah@azure1:~$ sudo chown -R webapp:webapp /opt/meow

🌞être exécutable (commande chmod) et être inutilisable par les "autres" (ni r, ni w, ni x)
sarah@azure1:~$ sudo chmod 700 /usr/local/bin/get_secrets.sh

➜ Au cas où j'ai besoin de préciser... TU TESTES TON SCRIPT
 Je verifie si il appartient bien a webapp
 
 sarah@azure1:~$ ls -l /usr/local/bin/get_secrets.sh
-rwx------ 1 webapp webapp 1251 Oct 31 09:48 /usr/local/bin/get_secrets.sh

sarah@azure1:~$ sudo -u webapp /usr/local/bin/get_secrets.sh
Connexion à Azure avec Managed Identity
Connecté à Azure
Secret DBPASSWORD modifié
ise à jour du mot de passe dans /opt/meow/.env
Fichier .env mis à jour

🌞 Ajouter le script en ExecStartPre= dans webapp.service

éditer le fichier webapp.service
sudo nano /etc/systemd/system/webapp.service

ajouter une ligne ExecStartPre=/usr/local/bin/get_secrets.sh dans la section [Service]
[Unit]
Description=Super Webapp MEOW
After=network.target

[Service]
User=webapp
Group=webapp
WorkingDirectory=/opt/meow
ExecStart=/opt/meow/venv/bin/python /opt/meow/app.py --host=0.0.0.0 --port=8000
ExecStartPre=/usr/local/bin/get_secrets.sh
Restart=always

[Install]
WantedBy=multi-user.target



🌞exécuter une commande sudo systectl daemon-reload pour indiquer au système qu'on a modifié un service
🌞relancer le service webapp

sarah@azure1:~$ sudo systemctl daemon-reload
sarah@azure1:~$ sudo systemctl restart webapp


🌞 Prouvez que la ligne en ExecStartPre= a bien été exécutée
sarah@azure1:~$ sudo systemctl status webapp
● webapp.service - Super Webapp MEOW
     Loaded: loaded (/etc/systemd/system/webapp.service; enabled; vendor preset: enabled)
     Active: activating (start-pre) since Fri 2025-10-31 11:37:35 UTC; 769ms ago
Cntrl PID: 10026 (get_secrets.sh)
      Tasks: 4 (limit: 1009)
     Memory: 40.1M
        CPU: 674ms
     CGroup: /system.slice/webapp.service
             ├─10026 /bin/bash /usr/local/bin/get_secrets.sh
             ├─10027 bash /usr/bin/az login --identity --allow-no-subscriptions
             └─10030 /usr/bin/../../opt/az/bin/python3 -Im azure.cli login --identity --allow-no-subscriptions

Oct 31 11:37:35 azure1 systemd[1]: Starting Super Webapp MEOW...
Oct 31 11:37:35 azure1 get_secrets.sh[10026]: Connexion à Azure via Managed Identity...


C. Secret Flask¶

